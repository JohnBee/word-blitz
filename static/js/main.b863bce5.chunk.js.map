{"version":3,"sources":["components/Timer.js","components/LetterScore.js","components/Tile.js","components/WordTiles.js","components/WordInput.js","components/FoundWords.js","components/SmartWordGenerator.js","components/WordBlitz.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","className","time","letterScore","getScore","char","Math","round","Tile","isSelected","WordTiles","wordString","removeFirst","arr","el","i","indexOf","slice","str","c","index","selected","removedLetters","typedWord","split","removed","out","length","push","renderTiles","WordInput","useState","word","setWord","validWord","setValidWord","isValidWord","wordArr","letters","left","useEffect","type","onKeyDown","e","key","handleWordSubmit","onChange","value","target","toUpperCase","handleTypedWord","FoundWords","wordsDict","Object","keys","usedWords","k","listify","SmartWordGenerator","letterWeights","vowels","weightedCharArr","genWeightArray","generatedString","floor","random","count","countVowels","generateArray","console","log","WordBlitz","setTypedWord","score","setScore","setUsedWords","setWordString","seeInstructions","setSeeInstructions","wordList","require","calculateScore","charArr","tempScore","prev","setTime","intervalId","setInterval","clearInterval","onClick","lowWord","toLowerCase","startIndex","lengths","endIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b863bce5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport function Timer(props){\r\n    return(\r\n        <div className=\"Timer\">\r\n        Time: {props.time}s\r\n        </div>\r\n    );\r\n}\r\n","export const letterScore = {\r\n    'A': 90,\r\n    'B': 20,\r\n    'C': 50,\r\n    'D': 30,\r\n    'E': 110,\r\n    'F': 20,\r\n    'G': 20,\r\n    'H': 30,\r\n    'I': 80,\r\n    'J': 80,\r\n    'K': 11,\r\n    'L': 50,\r\n    'M': 30,\r\n    'N': 70,\r\n    'O': 70,\r\n    'P': 30,\r\n    'Q': 2,\r\n    'R': 80,\r\n    'S': 60,\r\n    'T': 70,\r\n    'U': 40,\r\n    'V': 10,\r\n    'W': 10,\r\n    'X': 2,\r\n    'Y': 2,\r\n    'Z': 2\r\n};\r\nexport function getScore(char){\r\n    return Math.round((200-letterScore[char])/10);\r\n}\r\n","import React from 'react';\r\nimport { getScore } from \"./LetterScore\";\r\n\r\nexport function Tile(props){\r\n    return(\r\n        <div className={props.isSelected ? \"Tile Selected\" : \"Tile\"}>\r\n            <div className=\"Score\">\r\n                {getScore(props.char)}\r\n            </div>\r\n            {props.char}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Tile } from './Tile';\r\n\r\n\r\n\r\nexport function WordTiles(props){\r\n    let wordString = props.wordString;\r\n\r\n    function removeFirst(arr, el){\r\n        const i = arr.indexOf(el);\r\n        if (i === -1) return [arr, false];\r\n        return [[...arr.slice(0,i), ...arr.slice(i+1)],true];\r\n    }\r\n    function renderTile(c, index, selected){\r\n            return (<Tile isSelected={selected} key={index} char={c}/>);\r\n    }\r\n    function renderTiles(str){\r\n        let removedLetters = props.typedWord.split(\"\");\r\n        let removed = false;\r\n        let out = [];\r\n        for(let i = 0; i < str.length; i++){\r\n            [removedLetters, removed] = removeFirst(removedLetters, str[i]);\r\n            out.push(renderTile(str[i], i, removed));\r\n        }\r\n        return out;\r\n    }\r\n    return(\r\n        <div className=\"WordTiles\">\r\n            { renderTiles(wordString) }\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nexport function WordInput(props){\r\n    const [word, setWord] = useState(\"\");\r\n    const [validWord, setValidWord] = useState(true);\r\n\r\n    function removeFirst(arr, el){\r\n        const i = arr.indexOf(el);\r\n        if (i === -1) return [arr,false];\r\n        return [[...arr.slice(0,i), ...arr.slice(i+1)],true];\r\n    }\r\n    function isValidWord(){\r\n        let wordArr = word.split(\"\");\r\n        for(let c of wordArr){\r\n            if(props.letters.indexOf(c) === -1){\r\n                return false; // Letter not in generated letters\r\n            }\r\n        }\r\n        // try and remove each typed letter from the gen string if possible\r\n        let [left, removed] = [props.letters, false];\r\n        for(let c of wordArr){\r\n            [left, removed] = removeFirst(left, c);\r\n            if(!removed){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    useEffect(() => {\r\n        setValidWord(isValidWord());\r\n    }, [word]);\r\n\r\n    function handleOnChange(e){\r\n        const value = e.target.value.toUpperCase();\r\n        setWord(value);\r\n        props.handleTypedWord(value);\r\n    }\r\n    function handleKeyDown(e){\r\n        if(e.key === 'Enter' && word.length > 0 && isValidWord()){\r\n            props.handleWordSubmit(word);\r\n\r\n            setWord(\"\");\r\n        }\r\n    }\r\n    return(\r\n        <input type=\"text\" className={validWord ? \"WordInput\" : \"WordInput Invalid\"} onKeyDown={handleKeyDown} onChange={handleOnChange} value={word}/>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport function FoundWords(props) {\r\n    function listify(wordsDict){\r\n        let out = [];\r\n        for(let k of Object.keys(props.usedWords)){\r\n            out.push(<li key={k} className=\"FoundWord\">{k} +{props.usedWords[k]}</li>);\r\n        }\r\n        //return Object.keys(props.usedWords).map((k) => {<li>{k}</li>});\r\n        return out;\r\n    }\r\n    return(\r\n        <div className={FoundWords}>\r\n            <ul className=\"FoundWords list\">\r\n                {listify(props.usedWords)}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n","export function SmartWordGenerator(){\r\n    const letters = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\r\n                    \"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"];\r\n\r\n    const letterWeights = {\"A\": 7, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 12,\r\n                           \"F\": 2, \"G\": 2, \"H\": 5, \"I\": 6, \"J\": 1,\r\n                           \"K\": 1, \"L\": 4, \"M\": 3, \"N\": 6, \"O\": 8,\r\n                           \"P\": 2, \"Q\": 1, \"R\": 6, \"S\": 6, \"T\": 9,\r\n                           \"U\": 3, \"V\": 1, \"W\": 2, \"X\": 1, \"Y\": 2,\r\n                           \"Z\": 1};\r\n    let vowels = [\"A\",\"E\",\"I\",\"O\",\"U\"];\r\n    let x = () => {\r\n        let sum = 0.0;\r\n        for(let k of Object.keys(letterWeights)){\r\n            sum = sum + letterWeights[k];\r\n        }\r\n        return sum;\r\n    }\r\n    function countVowels(str){\r\n        let count = 0;\r\n        for(let c of str){\r\n            if(vowels.indexOf(c)!== -1){\r\n                count = count + 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    function genWeightArray(){\r\n        let arr = [];\r\n        for(let k of Object.keys(letterWeights)){\r\n            for(let i = 0; i < letterWeights[k]; i++){\r\n                arr.push(k);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    let weightedCharArr = genWeightArray();\r\n\r\n    function generateArray() {\r\n        let out = [];\r\n        for(let i=0; i < 10; i++){\r\n            out.push(weightedCharArr[Math.floor(Math.random()*weightedCharArr.length)])\r\n        }\r\n        // check if no vowels, then insert some\r\n        if(countVowels(out) <= 1){\r\n            for(let i = 0; i < out.length; i++){\r\n                if(vowels.indexOf(out[i]) === -1){\r\n                    out[i] = vowels[Math.floor(Math.random()*vowels.length)];\r\n                }\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n    let generatedString = generateArray()\r\n    console.log(generatedString);\r\n\r\n    return generatedString;\r\n}\r\n","import React, { useState, useHooks, useEffect } from 'react';\r\nimport { Timer } from './Timer';\r\nimport { WordTiles } from './WordTiles';\r\nimport { WordInput } from './WordInput';\r\nimport { getScore } from './LetterScore';\r\nimport { FoundWords } from './FoundWords';\r\nimport { SmartWordGenerator } from './SmartWordGenerator';\r\n\r\nexport function WordBlitz(){\r\n    const [typedWord, setTypedWord] = useState(\"\");\r\n    const [genLetters, setGenLetters] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const [usedWords, setUsedWords] = useState({});\r\n    const [timerDone, setTimerDone] = useState(false);\r\n    const [wordString, setWordString] = useState([]);\r\n    const [seeInstructions, setSeeInstructions] = useState(true);\r\n\r\n    var wordList = require('word-list-json');\r\n\r\n    function handleTypedWord(word){\r\n        setTypedWord(word);\r\n    }\r\n    function handleGenLetters(letters){\r\n        setGenLetters(letters);\r\n    }\r\n    function calculateScore(word){\r\n        let charArr = word.split(\"\");\r\n        let tempScore = 0;\r\n        for(let c of charArr){\r\n            tempScore = tempScore + getScore(c);\r\n        }\r\n        setUsedWords({[word]:tempScore, ...usedWords});\r\n        setScore((prev) => prev + tempScore);\r\n    }\r\n    function handleWordSubmit(word){\r\n        //check if it's in the dictionary\r\n        let lowWord = word.toLowerCase();\r\n        let startIndex = wordList.lengths[word.length-1];\r\n        let endIndex = wordList.lengths[word.length];\r\n\r\n        if (word.length === 2){\r\n            startIndex = 0;\r\n        }\r\n        for(let i = startIndex; i < endIndex; i++){\r\n            if(lowWord === wordList[i]){\r\n                if(Object.keys(usedWords).indexOf(word) === -1){\r\n                    calculateScore(word);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function handleTimerDone(isDone){\r\n        setTimerDone(isDone);\r\n    }\r\n    function resetGame(){\r\n        console.log(\"Reset\");\r\n    }\r\n\r\n    const [time, setTime] = useState(0);\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            if(time > 0){\r\n                setTime((prev) => prev - 1);\r\n            }\r\n            if(time === 0){\r\n                clearInterval(intervalId);\r\n            }\r\n        }, 1000);\r\n        return () => clearInterval(intervalId);\r\n    }, [time]);\r\n\r\n\r\n    function resetGame(){\r\n        setSeeInstructions(false);\r\n        setTime(30);\r\n        setWordString(SmartWordGenerator());\r\n        setScore(0);\r\n        setUsedWords([]);\r\n        setTypedWord(\"\");\r\n    }\r\n    return(\r\n        <div className=\"WordBlitz\">\r\n        {!seeInstructions && <Timer time={time}/>}\r\n        {\r\n            seeInstructions &&\r\n            <div className=\"Instructions\">\r\n                <h1>How To Play: </h1>\r\n                    <ol>\r\n                        <li>Press START</li>\r\n                        <li>Enter as many words as possible using the letters given.</li>\r\n                        <li>Score is calculated from letters used.</li>\r\n                    </ol>\r\n            <br/ >\r\n            </div>\r\n        }\r\n        {<WordTiles typedWord={typedWord.toUpperCase()} wordString={wordString}/>}\r\n\r\n        {\r\n            time===0 ?\r\n            <button className=\"StartButton\" onClick={resetGame}>START</button> :\r\n            <WordInput handleTypedWord={handleTypedWord} letters={wordString} handleWordSubmit={handleWordSubmit}/>\r\n        }\r\n\r\n        {\r\n            !seeInstructions && <div className=\"PlayerScore\">\r\n            Score: {score}\r\n        </div>\r\n        }\r\n        <FoundWords usedWords={usedWords} />\r\n        </div>\r\n\r\n    );\r\n}\r\n","import './App.css';\nimport { WordBlitz } from \"./components/WordBlitz\"\n\nfunction App() {\n    return (\n    <div className=\"App\">\n        <WordBlitz />\n    </div>\n    );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}